1. 관계의 개념
  가. 관계의 정의
    “엔터티의 인스턴스 사이의 논리적인 연관성으로서 존재의 형태로서나 행위로서 서로에게 연관성이 부여된 상태”
  나. 관계의 패어링
    - 유의해야할 점은 관계는 엔터티 안에 인스턴스가 개별적으로 관계를 가지는 것(패어링)이고/ 이것의 집합을 관계로 표현한다는 것이다. 
    - 따라서 개별 인스턴스가 각각 다른 종류의 관계를 가지고 있다면/ 두 엔터티 사이에 두 개 이상의 관계가 형성될 수 있다.
    - 각각의 엔터티의 인스턴스들은 자신이 관련된 인스턴스들과 관계의 어커런스로 참여하는 형태를 관계 패어링(Relationship Paring)이라 한다. 
        [ 그림 Ⅰ-1-31]에서는 강사인 정성철은 이춘식과 황종하에게 강의를 하는 형태로 관계가 표현되어 있고 조시형은 황종하에게 강의를 하는 형태로 되어 있다. 
        이와 같이 엔터티내에 인스턴스와 인스턴스사이에 관계가 설정되어 있는 어커런스를 관계 패어링이라고 한다. 
    - 엔터티는 인스턴스의 집합을 논리적으로 표현하였다면 관계는 관계 패어링의 집합을 논리적으로 표현한 것이다.
    - 최초의 ERD(Chen 모델)에서 관계는 속성을 가질 수 있었으나 요즘 ERD에서는 관계를 위해 속성을 도출하지는 않는다. 
    - 관계의 표현에는 이항 관계(Binary Relationship), 삼항 관계(Ternary Relationship), n항 관계가 존재할 수 있는데 / 실제에 있어서 삼항 관계 이상은 잘 나타나지 않는다.

2. 관계의 분류 (어떤 목적으로 연결되었느냐에 따라 분류)
  존재에 의한 관계
  행위에 의한 관계
UML(Unified Modeling Language)에는 클래스다이어그램의 관계중 연관관계(Association)와 의존관계(Dependency)가 있다. 
이 둘의 차이는 연관관계는 항상 이용하는 관계로 존재적 관계에 해당하고 의존관계는 상대방 클래스의 행위에 의해 관계가 형성될 때 구분하여 표현한다는 것이다. 
즉, ERD에서는 존재적 관계와 행위에 의한 관계를 구분하지 않고 표현했다면 클래스다이어그램에서는 이것을 구분하여 연관관계와 의존관계로 표현하고 있는 것이다. 
연관관계는 표현방법이 실선으로 표현되고 소스코드에서 멤버변수로 선언하여 사용하게 하고, 
의존관계는 점선으로 표현되고 행위를 나타내는 코드인 Operation(Method)에서 파라미터 등으로 이용할 수 있도록 되어 있다.

3. 관계의 표기법
관계명(Membership) : 관계의 이름
관계차수(Cardinality) : 1:1, 1:M, M:N
관계선택사양(Optionality) : 필수관계, 선택관계

4. 관계의 정의 및 읽는 방법
  가. 관계 체크사항
      두 개의 엔터티 사이에 '관심있는 연관규칙'이 존재하는가?
      두 개의 엔터티 사이에 '정보의 조합'이 발생되는가?
      업무기술서, 장표에 관계연결에 대한 '규칙이 서술'되어 있는가?
      업무기술서, 장표에 관계연결을 가능하게 하는 '동사(Verb)'가 있는가?
  나. 관계 읽기
    기준(Source) 엔터티를 한 개(One) 또는 각(Each)으로 읽는다.
    ->대상(Target) 엔터티의 관계참여도 즉 개수(하나, 하나 이상)를 읽는다.
    ->관계선택사양과 관계명을 읽는다.

